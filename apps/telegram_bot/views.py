from django.conf import settings
from telebot import TeleBot, types
from .models import TelegramUser,UserProfile
from apps.secondary.models import Nap,QuestionAdd
from apps.base.models import InterviewAnswer
import re

# Create your views here.
TELEGRAM_TOKEN = "6583047651:AAHT4PxFVmytmGGJo5E6yVSKDbLT7wC_HjU"
ADMIN_ID = "-1002082761055"

bot = TeleBot(TELEGRAM_TOKEN, threaded=False)
admin_id = ADMIN_ID

@bot.message_handler(commands=['start'])
def start(message: types.Message):
    welcome_text = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è! üåü\n\n"
    welcome_text += "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞! ü§ñ\n\n"
    welcome_text += "–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å. –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –Ω–∞—à –±–æ—Ç —Å–¥–µ–ª–∞–µ—Ç —Ç–≤–æ–π –¥–µ–Ω—å –ª—É—á—à–µ! üí´\n\n"
    welcome_text += "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if UserProfile.objects.filter(user_id=message.from_user.id).exists():
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ö–∞–±–∏–Ω–µ—Ç"
        markup = types.ReplyKeyboardMarkup(row_width=2)
        item1 = types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å")
        item2 = types.KeyboardButton("üîê –ö–∞–±–∏–Ω–µ—Ç")
        markup.add(item1, item2)
        bot.send_message(message.chat.id, welcome_text)
        
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:", reply_markup=markup)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
        markup = types.ReplyKeyboardMarkup(row_width=1)
        item1 = types.KeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        markup.add(item1)
        bot.send_message(message.chat.id, welcome_text)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
def back_to_main_menu(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    start(message)

@bot.message_handler(func=lambda message: message.text == "üîê –ö–∞–±–∏–Ω–µ—Ç")
def profile(message: types.Message):
    user_id = message.from_user.id
    user_profile = UserProfile.objects.filter(user_id=user_id).first()
    if user_profile:
        if user_profile.status:
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å—Ç–∞—Ç—É—Å, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
            status_title = user_profile.status.title
            if status_title == "–í—ã–ø—É—Å–∫–Ω–∏–∫":
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ" –∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
                markup = types.ReplyKeyboardMarkup(row_width=1)
                start_interview_button = types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ")
                back_button = types.KeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
                markup.add(start_interview_button)
                markup.add(back_button)
                bot.send_message(message.chat.id, "–í—ã –≥–æ—Ç–æ–≤—ã –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é?", reply_markup=markup)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ–±—â–µ–≥–æ —Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤
            profile_text = f"üë§ <b>–ò–º—è:</b> {user_profile.full_name}\n"
            profile_text += f"üéì <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {user_profile.direction.title}\n"
            profile_text += f"üîñ <b>–°—Ç–∞—Ç—É—Å:</b> {status_title}\n"
            profile_text += f"üíØ <b>–û–±—â–∏–π —Å—á–µ—Ç –±–∞–ª–ª–æ–≤:</b> {user_profile.total_score}\n"  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç –±–∞–ª–ª–æ–≤
            profile_text += f"ü•∑ <b>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª:</b> 9\n"  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç –±–∞–ª–ª–æ–≤
            
            bot.send_message(message.chat.id, profile_text, parse_mode='HTML')
        else:
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
            profile_text = f"üë§ <b>–ò–º—è:</b> {user_profile.full_name}\n"
            profile_text += f"üéì <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {user_profile.direction.title}\n"
            profile_text += "üîñ <b>–°—Ç–∞—Ç—É—Å:</b> –Ω–µ —É–∫–∞–∑–∞–Ω\n"
            profile_text += f"üíØ <b>–û–±—â–∏–π —Å—á–µ—Ç –±–∞–ª–ª–æ–≤:</b> {user_profile.total_score}\n" 
            profile_text += f"ü•∑ <b>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª:</b> 9\n"  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç –±–∞–ª–ª–æ–≤
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç –±–∞–ª–ª–æ–≤
            bot.send_message(message.chat.id, profile_text, parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

        
class Mail:
    def __init__(self): 
        self.description = None

mail = Mail()

    
def get_chat_title(chat_id):
    try:
        chat = bot.get_chat(chat_id)
        return chat.title
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {e}")
        return None
    
def get_message(message:types.Message):
    mail.description = message.text 
    users = TelegramUser.objects.all()
    for user in users:
        bot.send_message(user.id_user, mail.description)
    bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞")

@bot.message_handler(commands=['mailing'])
def send_mailing(message:types.Message):
    if message.chat.id != int(admin_id):
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É")
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ")
    bot.register_next_step_handler(msg, get_message)


@bot.message_handler(func=lambda message: message.text == "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
def register(message: types.Message):
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if UserProfile.objects.filter(user_id=message.from_user.id).exists():
        bot.send_message(chat_id, "üõë <b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>", parse_mode='HTML')
    else:
        bot.send_message(chat_id, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        bot.register_next_step_handler(message, process_registration)

def process_registration(message: types.Message):
    full_name = message.text
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    markup = types.InlineKeyboardMarkup()
    nap_list = Nap.objects.all()
    for nap in nap_list:
        markup.add(types.InlineKeyboardButton(text=nap.title, callback_data=f"registration_{full_name}_{nap.id}"))
    
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('registration_'))
def process_registration_callback(call):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    item1 = types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å")
    item2 = types.KeyboardButton("üîê –ö–∞–±–∏–Ω–µ—Ç")
    markup.add(item1, item2)
    full_name, direction_id = call.data.split('_')[1:]
    direction = Nap.objects.get(pk=int(direction_id))
    
    user, created = UserProfile.objects.get_or_create(
        user_id=call.from_user.id,
        chat_id=call.message.chat.id,
        defaults={
            'full_name': full_name,
            'direction': direction,
        }
    )
    
    bot.send_message(call.message.chat.id, f"–°–ø–∞—Å–∏–±–æ, {full_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ '{direction.title}'.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üöÄ –ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ")
def start_interview(message: types.Message):
    user_id = message.from_user.id
    user_profile = UserProfile.objects.filter(user_id=user_id).first()
    if user_profile and user_profile.status and user_profile.status.title == "–í—ã–ø—É—Å–∫–Ω–∏–∫":
        if not InterviewAnswer.objects.filter(user_profile=user_profile).exists():
            interview_text = "üéôÔ∏è <b>–ù–∞—á–∞–ª–æ—Å—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</b> üéôÔ∏è\n\n"
            if user_profile.direction.title == "UXUI":
                questions = QuestionAdd.objects.filter(question__direction=user_profile.direction).order_by('?')[:5]
            else:
                questions = QuestionAdd.objects.filter(question__direction=user_profile.direction).order_by('?')[:7]
            for idx, question in enumerate(questions, start=1):
                interview_text += f"{idx}. {question.text}\n"
            bot.send_message(message.chat.id, interview_text, parse_mode='HTML')
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ
            user_profile.interview_started = True
            user_profile.save()
            # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
            bot.register_next_step_handler(message, process_interview, user_profile, questions, 0)
            # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        else:
            bot.send_message(message.chat.id, "üõë <b>–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</b>", parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, "üõë <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è</b>", parse_mode='HTML')

def process_interview(message, user_profile, questions, question_index):
    if question_index < len(questions):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id, f"–í–æ–ø—Ä–æ—Å {question_index + 1}: {questions[question_index].text}")
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        bot.register_next_step_handler(message, save_answer_and_ask_next_question, user_profile, questions, question_index)
    else:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
        user_profile.interview_started = False
        user_profile.save()
        bot.send_message(message.chat.id, "‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")

def save_answer_and_ask_next_question(message, user_profile, questions, question_index):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    InterviewAnswer.objects.create(
        user_profile=user_profile,
        question=questions[question_index],
        answer=message.text
    )
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    process_interview(message, user_profile, questions, question_index + 1)


@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å")
def about_us(message: types.Message):
    about_text = "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞! üåü\n\n"
    about_text += "–ú—ã - –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞—é—â–∞—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–∞—Å! üöÄ\n\n"
    about_text += "üíº –ù–∞—à –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å —Ü–µ–ª—å—é –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≤–∞–º —É–¥–æ–±—Å—Ç–≤–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é. üíº\n\n"
    about_text += "üë®‚Äçüíª –ù–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –≤—ã—è–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞—à–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—è–≤–∏—Ç—å —Å–µ–±—è —Å –ª—É—á—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –∏ –¥–æ–±–∏—Ç—å—Å—è —É—Å–ø–µ—Ö–∞ –≤ —Å–≤–æ–µ–π –∫–∞—Ä—å–µ—Ä–µ! üë©‚Äçüíº\n\n"
    about_text += "üìû –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ú—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –æ–±—â–µ–Ω–∏—é –∏ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è! üìß\n\n"
    about_text += "üì± –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
    about_text += "Username: @erk1nbaew\n"
    about_text += "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: 0225082021\n"
    about_text += "–ü–æ—á—Ç–∞: erk1nbaevw2711@gmail.com\n\n"
    about_text += "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º! –ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–º–æ—á—å –≤–∞–º –¥–æ—Å—Ç–∏—á—å –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π! üí™üòä"
    
    bot.send_message(message.chat.id, about_text)

def get_text(message):
    bot.send_message(admin_id, message, parse_mode='HTML')

def get_text_doctor(message, id):
    bot.send_message(id, message)


@bot.message_handler()  
def echo(message:types.Message):
    # bot.delete_message(message.chat.id, message.message_id)  
    bot.send_message(message.chat.id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª")


